// commands/formulario.js
import {
    Client,
    ActionRowBuilder,
    ButtonBuilder,
    ButtonStyle,
    ModalBuilder,
    TextInputBuilder,
    TextInputStyle,
    EmbedBuilder,
    InteractionType,
    PermissionsBitField
} from 'discord.js';

const FORM_CHANNEL_ID = '1390033258309357577'; // canal para enviar painel de formul√°rio
const PANEL_CHANNEL_ID = '1396852912709308426';
const TUTORIAL = '1390033257533542410';
const ICON_PF = '<:iconepf:1399436333071728730>'; // emoji da pol√≠cia
const F3_PENDENTE = '1399875114660532244';
const RESPONSES_CHANNEL_ID = '1390033258477125632'; // canal para respostas
const APPROVED_CHANNEL_ID = '1390033258309357578'; // canal de mensagem final se aprovado/reprovado
const FORM_CATEGORY_ID = '1390033258309357576'; // categoria para criar canais de formul√°rio
const RECRUITER_ROLE_ID = '1390033256640024594'; // s√≥ quem tem esse cargo pode aprovar/reprovar
const APPROVED_ROLES = [
    '1390033256652476596',
    '1390033256652476595',
    '1390033256652476594',
    '1390033256652476592'
];


const QUESTIONS = [
    '1¬∫ ‚Ä¢ Qual sua idade?',
    '2¬∫ ‚Ä¢ Qual o seu id no jogo?',
    '3¬∫ ‚Ä¢ Qual sua inten√ß√£o em entrar na policia federal?',
    '4¬∫ ‚Ä¢ O que √© RP e ANTI-RP?',
    '5¬∫ ‚Ä¢ O que √© RDM e VDM?',
    '6¬∫ ‚Ä¢ O que √© ter amor a vida?',
    '7¬∫ ‚Ä¢ O que √© car jacking?',
    '8¬∫ ‚Ä¢ O que √© ninja jacking?',
    '9¬∫ ‚Ä¢ O que √© DarkRP?',
    '10¬∫ ‚Ä¢ O que s√£o √°reas verdes, neutras e vermelhas?',
    '11¬∫ ‚Ä¢ Qual patente m√≠nima necess√°ria para iniciar uma patrulha?',
    '12¬∫ ‚Ä¢ Quantos policiais s√£o necess√°rios para iniciar a patrulha?',
    '13¬∫ ‚Ä¢ Quando √© permitido atirar em uma persegui√ß√£o?',
    '14¬∫ ‚Ä¢ Como deve ser a conduta de abordagem?',
    '15¬∫ ‚Ä¢ Qual o m√°ximo de artigos que uma pessoa pode ser presa?',
    '16¬∫ ‚Ä¢ Voc√™ pode abordar trabalhador? Se sim, quando?',
    '17¬∫ ‚Ä¢ Quando deve ser usado o taser?',
    '18¬∫ ‚Ä¢ Como deve ser o nome √† paisana e o nome em patrulha?',
    '19¬∫ ‚Ä¢ Pode prender morto? Se sim, quando?'
];

export async function enviarPainelFormulario(client) {
    const channel = await client.channels.fetch(FORM_CHANNEL_ID);
    if (!channel) return console.log('Canal de formul√°rio n√£o encontrado');

    const embed = new EmbedBuilder()
        .setTitle('Formul√°rio de Recrutamento')
        .setDescription('Clique no bot√£o abaixo para iniciar o formul√°rio.')
        .setColor(0xFFD700);

    const row = new ActionRowBuilder().addComponents(
        new ButtonBuilder()
            .setCustomId('start_form')
            .setLabel('Realizar Formul√°rio')
            .setStyle(ButtonStyle.Primary)
    );

    await channel.send({ embeds: [embed], components: [row] });
}

export async function formularioHandler(client, interaction) {
    try {
        if (interaction.isButton()) {
            // Iniciar formul√°rio
            if (interaction.customId === 'start_form') {
                const guild = interaction.guild;

                // Criar canal tempor√°rio para o usu√°rio
                const channel = await guild.channels.create({
                    name: `formulario-${interaction.user.username}`,
                    type: 0, // GuildText
                    parent: FORM_CATEGORY_ID,
                    permissionOverwrites: [
                        {
                            id: guild.id,
                            deny: [PermissionsBitField.Flags.ViewChannel]
                        },
                        {
                            id: interaction.user.id,
                            allow: [PermissionsBitField.Flags.ViewChannel, PermissionsBitField.Flags.SendMessages]
                        }
                    ]
                });

                await interaction.reply({ content: `Seu canal de formul√°rio foi criado: ${channel}`, ephemeral: true });

                // Enviar perguntas no canal criado
                const responses = [];
                for (const question of QUESTIONS) {
                    const embed = new EmbedBuilder()
                        .setTitle('Pergunta')
                        .setDescription(question)
                        .setColor(0xFFD700);
                    await channel.send({ embeds: [embed] });

                    // Esperar resposta do usu√°rio
                    const filter = m => m.author.id === interaction.user.id;
                    const collected = await channel.awaitMessages({ filter, max: 1, time: 600000, errors: ['time'] });
                    const answer = collected.first().content;
                    responses.push({ question, answer });
                }

                // Enviar respostas no canal de respostas
                const embedResponses = new EmbedBuilder()
                    .setTitle(`Formul√°rio de ${interaction.user.tag}`)
                    .setColor(0xFFD700);

                responses.forEach((resp, i) => {
                    embedResponses.addFields({ name: resp.question, value: resp.answer });
                });

                // Bot√µes aprovar/reprovar
                const row = new ActionRowBuilder()
                    .addComponents(
                        new ButtonBuilder()
                            .setCustomId(`approve_${interaction.user.id}`)
                            .setLabel('Aprovar')
                            .setStyle(ButtonStyle.Success),
                        new ButtonBuilder()
                            .setCustomId(`reject_${interaction.user.id}`)
                            .setLabel('Reprovar')
                            .setStyle(ButtonStyle.Danger)
                    );

                const responseChannel = await client.channels.fetch(RESPONSES_CHANNEL_ID);
                const responseMessage = await responseChannel.send({ embeds: [embedResponses], components: [row] });

                await channel.send('Formul√°rio enviado! Aguarde a aprova√ß√£o/reprova√ß√£o.');
            }

            // Aprovar
            if (interaction.customId.startsWith('approve_')) {
                if (!interaction.member.roles.cache.has(RECRUITER_ROLE_ID)) {
                    return interaction.reply({ content: 'Voc√™ n√£o tem permiss√£o.', ephemeral: true });
                }

                const targetUserId = interaction.customId.split('_')[1];
                const member = await interaction.guild.members.fetch(targetUserId);
                if (!member) return interaction.reply({ content: 'Membro n√£o encontrado.', ephemeral: true });

                for (const roleId of APPROVED_ROLES) {
                    await member.roles.add(roleId).catch(console.error);
                }

                await interaction.update({ content: 'Aprovado!', components: [], embeds: [] });

                const approvedChannel = await client.channels.fetch(APPROVED_CHANNEL_ID);
                const embedApproved = new EmbedBuilder()
                    .setTitle(`${ICON_PF} Formul√°rio Aprovado ‚úÖ`)
                    .setDescription(`
                Ol√° ${member}, parab√©ns! Voc√™ foi aprovado no formul√°rio.

                üìù **Pr√≥ximos passos:**
                ‚Ä¢ Fa√ßa o seu **registro** no canal: <#${PANEL_CHANNEL_ID}>
                ‚Ä¢ Solicite sua **tag** no canal: <#${F3_PENDENTE}>
                ‚Ä¢ Confira o **tutorial da corpora√ß√£o** aqui: <#${TUTORIAL}>
                `)
                    .setColor(0x00FF00)
                    .setFooter({ text: 'Pol√≠cia Federal - DRP' });

                await approvedChannel.send({ embeds: [embedApproved] });
            }

            // Reprovar
            if (interaction.customId.startsWith('reject_')) {
                if (!interaction.member.roles.cache.has(RECRUITER_ROLE_ID)) {
                    return interaction.reply({ content: 'Voc√™ n√£o tem permiss√£o.', ephemeral: true });
                }

                const targetUserId = interaction.customId.split('_')[1];
                const member = await interaction.guild.members.fetch(targetUserId);
                if (!member) return interaction.reply({ content: 'Membro n√£o encontrado.', ephemeral: true });

                // Abrir modal para motivo
                const modal = new ModalBuilder()
                    .setCustomId(`reject_reason_${targetUserId}`)
                    .setTitle('Motivo da Reprova√ß√£o');

                modal.addComponents(
                    new ActionRowBuilder().addComponents(
                        new TextInputBuilder()
                            .setCustomId('reason')
                            .setLabel('Digite o motivo')
                            .setStyle(TextInputStyle.Paragraph)
                            .setRequired(true)
                    )
                );

                await interaction.showModal(modal);
            }
        }

        // Receber motivo de reprova√ß√£o
        if (interaction.type === InteractionType.ModalSubmit && interaction.customId.startsWith('reject_reason_')) {
            const targetUserId = interaction.customId.split('_')[2];
            const reason = interaction.fields.getTextInputValue('reason');

            const member = await interaction.guild.members.fetch(targetUserId);
            if (!member) return interaction.reply({ content: 'Membro n√£o encontrado.', ephemeral: true });

            await interaction.reply({ content: 'Reprova√ß√£o registrada!', ephemeral: true });

            const approvedChannel = await client.channels.fetch(APPROVED_CHANNEL_ID);
            const embedReject = new EmbedBuilder()
                .setTitle('Formul√°rio Reprovado ‚ùå')
                .setDescription(`${member} foi reprovado.\nMotivo: ${reason}`)
                .setColor(0xFF0000);

            await approvedChannel.send({ embeds: [embedReject] });
        }

    } catch (err) {
        console.error('Erro ao processar intera√ß√£o:', err);
    }
}
